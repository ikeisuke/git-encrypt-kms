#!/usr/bin/env bash

OPTIONS_SPEC='git encrypt --install
git encrypt --configure
git encrypt --add-pattern <pattern>
git encrypt --clean
git encrypt --smudge
git encrypt --diff
--
install Installs filter scripts.
configure Configure aws and kms settings.
add-pattern Adds pattern for encryption file.
clean clean
smudge smudge
diff diff'

# Include the git setup script. This parses and normalized CLI arguments.
. $(git --exec-path)/git-sh-setup

[ -z $GIT_DIR ] && GIT_DIR="$(git rev-parse --git-dir)"
GIT_PROJECT_TOP_LEVEL="$(git rev-parse --show-toplevel)"

function add_attribute() {
  local attribute="$1" file="$2"
  [ -z "$file" ] && file="$GIT_PROJECT_TOP_LEVEL/.gitattributes"
  [ ! -f "$file" ] && touch "$file"
  grep "$(printf %q "$attribute" | sed -e 's/\\ / /g')" "$file" >/dev/null 2>&1
  [ "0" == "$?" ] || echo "$attribute" >> "$file"
}

function die() {
  exit 1
}

function ask_config() {
  local key="$1" default="$2" message="$3"
  configured=$(git config --get "$key")
  [ -z "$configured" ] && configured="$default"
  echo -n "Input $message [$configured]:"
  read input
  [ -z "$input" ] && input=$configured
  git config --replace-all "$key" "$input"
}

function generate_encryption_key() {
  local profile=$(git config --get encrypt.aws.profile)
    region=$(git config --get encrypt.aws.region)
    key=$(git config --get encrypt.kms.key-id)
    data_key_file="$GIT_PROJECT_TOP_LEVEL/.gitdatakey"
  [ -s "$data_key_file" ] && return
  [ -n "$profile" ] && profile="--profile $profile"
  [ -n "$region" ] && region="--region $region"
  aws kms generate-data-key-without-plaintext $profile $region \
    --key-id "$key" \
    --key-spec AES_256 \
    --query CiphertextBlob \
    --output text | base64 --decode > $data_key_file || die
}

function set_data_key() {
  local profile=$(git config --get encrypt.aws.profile)
    region=$(git config --get encrypt.aws.region)
    file="$GIT_PROJECT_TOP_LEVEL/.gitdatakey"
    pidfile="/tmp/git-encrypt.$(id -u)/git-encrypt.pid"
  if [ -f "$pidfile" ]; then
    line=$(ps --no-heading $(cat $pidfile))
    if [ -z "$line" ]; then
      rm -rf $(dirname $pidfile)
    fi
  fi
  git-encrypt-agent start
  hash=$(git-encrypt-agent get --name $GIT_PROJECT_TOP_LEVEL)
  if [ -n "${hash}" ]; then
    return;
  fi
  [ -n "$profile" ] && profile="--profile $profile"
  [ -n "$region" ] && region="--region $region"
  aws kms decrypt \
    $profile \
    $region \
    --ciphertext-blob "fileb://${file}" \
    --query Plaintext \
    --output text | base64 --decode | git-encrypt-agent add --name $GIT_PROJECT_TOP_LEVEL > /dev/null || die
}

function install() {
  git config --replace-all merge.renormalize true
  git config --replace-all filter.git-encrypt.clean  "git-encrypt --clean"
  git config --replace-all filter.git-encrypt.smudge "git-encrypt --smudge"
  git config --replace-all diff.git-encrypt.textconv "git-encrypt --diff"
  add_attribute '.git* !filter !diff' $GIT_DIR/info/attributes
  configure
}

function configure() {
  local data_key_file="$GIT_PROJECT_TOP_LEVEL/.gitdatakey"
  ask_config "encrypt.aws.profile" "" "your aws profile"
  ask_config "encrypt.aws.region"  "" "region to use"
  [ -s "$data_key_file" ] && return
  ask_config "encrypt.kms.key-id"  "" "Specified key for AWS KMS"
  generate_encryption_key
}

function add_filter_pattern() {
  local pattern="$1"
  add_attribute "$pattern filter=git-encrypt diff=git-encrypt"
}

function clean() {
  set_data_key
  cat - | git-encrypt-agent encrypt --name ${GIT_PROJECT_TOP_LEVEL} || die
}

function smudge() {
  set_data_key
  cat - | git-encrypt-agent decrypt --name ${GIT_PROJECT_TOP_LEVEL} || cat -
}

function diff() {
  set_data_key
  cat "$1" | git-encrypt-agent decrypt --name $GIT_PROJECT_TOP_LEVEL || cat "$1"
}

declare COMMAND="$1"
shift 2

case "$COMMAND" in
  --) "$0" -h; exit 0 ;;
  --install) install ;;
  --configure) configure ;;
  --add-pattern) add_filter_pattern "$1" ;;
  --clean) clean ;;
  --smudge) smudge ;;
  --diff) diff "$1" ;;
  *) echo "Unknown option: ${COMMAND}"; "$0" -h; exit 1;;
esac
